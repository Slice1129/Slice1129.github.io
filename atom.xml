<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Slice1129.github.io</id>
    <title>Demo</title>
    <updated>2020-05-14T06:00:52.737Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Slice1129.github.io"/>
    <link rel="self" href="https://Slice1129.github.io/atom.xml"/>
    <logo>https://Slice1129.github.io/images/avatar.png</logo>
    <icon>https://Slice1129.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Demo</rights>
    <entry>
        <title type="html"><![CDATA[jdk8 LinkedList]]></title>
        <id>https://Slice1129.github.io/post/jdk8-linkedlist/</id>
        <link href="https://Slice1129.github.io/post/jdk8-linkedlist/">
        </link>
        <updated>2020-05-14T06:00:27.000Z</updated>
        <content type="html"><![CDATA[<pre><code>/*
 * Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

package java.util;

import java.util.function.Consumer;

/**
 * Doubly-linked list implementation of the {@code List} and {@code Deque}
 * interfaces.  Implements all optional list operations, and permits all
 * elements (including {@code null}).
 *
 * &lt;p&gt;All of the operations perform as could be expected for a doubly-linked
 * list.  Operations that index into the list will traverse the list from
 * the beginning or the end, whichever is closer to the specified index.
 *
 * &lt;p&gt;&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt;
 * If multiple threads access a linked list concurrently, and at least
 * one of the threads modifies the list structurally, it &lt;i&gt;must&lt;/i&gt; be
 * synchronized externally.  (A structural modification is any operation
 * that adds or deletes one or more elements; merely setting the value of
 * an element is not a structural modification.)  This is typically
 * accomplished by synchronizing on some object that naturally
 * encapsulates the list.
 * &lt;p&gt;
 * If no such object exists, the list should be &quot;wrapped&quot; using the
 * {@link Collections#synchronizedList Collections.synchronizedList}
 * method.  This is best done at creation time, to prevent accidental
 * unsynchronized access to the list:&lt;pre&gt;
 *   List list = Collections.synchronizedList(new LinkedList(...));&lt;/pre&gt;
 *
 * &lt;p&gt;The iterators returned by this class's {@code iterator} and
 * {@code listIterator} methods are &lt;i&gt;fail-fast&lt;/i&gt;: if the list is
 * structurally modified at any time after the iterator is created, in
 * any way except through the Iterator's own {@code remove} or
 * {@code add} methods, the iterator will throw a {@link
 * ConcurrentModificationException}.  Thus, in the face of concurrent
 * modification, the iterator fails quickly and cleanly, rather than
 * risking arbitrary, non-deterministic behavior at an undetermined
 * time in the future.
 *
 * &lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed
 * as it is, generally speaking, impossible to make any hard guarantees in the
 * presence of unsynchronized concurrent modification.  Fail-fast iterators
 * throw {@code ConcurrentModificationException} on a best-effort basis.
 * Therefore, it would be wrong to write a program that depended on this
 * exception for its correctness:   &lt;i&gt;the fail-fast behavior of iterators
 * should be used only to detect bugs.&lt;/i&gt;
 *
 * &lt;p&gt;This class is a member of the
 * &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
 * Java Collections Framework&lt;/a&gt;.
 *
 * @param &lt;E&gt; the type of elements held in this collection
 * @author Josh Bloch
 * @see List
 * @see ArrayList
 * @since 1.2
 */

public class LinkedList&lt;E&gt;
        extends AbstractSequentialList&lt;E&gt;
        implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable {
    transient int size = 0;

    /**
     * Pointer to first node.
     * Invariant: (first == null &amp;&amp; last == null) ||
     * (first.prev == null &amp;&amp; first.item != null)
     */
    transient Node&lt;E&gt; first;

    /**
     * Pointer to last node.
     * Invariant: (first == null &amp;&amp; last == null) ||
     * (last.next == null &amp;&amp; last.item != null)
     */
    transient Node&lt;E&gt; last;

    /**
     * Constructs an empty list.
     */
    public LinkedList() {
    }

    /**
     * Constructs a list containing the elements of the specified
     * collection, in the order they are returned by the collection's
     * iterator.
     *
     * @param c the collection whose elements are to be placed into this list
     * @throws NullPointerException if the specified collection is null
     */
    public LinkedList(Collection&lt;? extends E&gt; c) {
        this();
        addAll(c);
    }

    /**
     * 在首部插入节点
     * Links e as first element.
     */
    private void linkFirst(E e) {
        final Node&lt;E&gt; f = first;
        final Node&lt;E&gt; newNode = new Node&lt;&gt;(null, e, f);
        first = newNode;
        if (f == null)
            last = newNode;
        else
            f.prev = newNode;
        size++;
        modCount++;
    }

    /**
     * 添加节点到尾部
     * Links e as last element.
     */
    void linkLast(E e) {
        //最后一个节点
        final Node&lt;E&gt; l = last;
        //创建Node，上一个Node，当前元素，
        final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);
        //将刚创建的Node赋值给最后一个节点
        last = newNode;
        if (l == null)
            first = newNode;
        else
            l.next = newNode;
        size++;
        modCount++;
    }

    /**
     * Inserts element e before non-null Node succ.
     * 将元素插入到指定节点
     */
    void linkBefore(E e, Node&lt;E&gt; succ) {
        // assert succ != null;
        final Node&lt;E&gt; pred = succ.prev;
        final Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, succ);
        succ.prev = newNode;
        if (pred == null)
            first = newNode;
        else
            pred.next = newNode;
        size++;
        modCount++;
    }

    /**
     * Unlinks non-null first node f.
     * 移除第一个节点
     */
    private E unlinkFirst(Node&lt;E&gt; f) {
        // assert f == first &amp;&amp; f != null;
        final E element = f.item;
        final Node&lt;E&gt; next = f.next;
        f.item = null;
        f.next = null; // help GC
        first = next;
        if (next == null)
            last = null;
        else
            next.prev = null;
        size--;
        modCount++;
        return element;
    }

    /**
     * Unlinks non-null last node l.
     * 移除最后一个节点
     */
    private E unlinkLast(Node&lt;E&gt; l) {
        // assert l == last &amp;&amp; l != null;
        final E element = l.item;
        final Node&lt;E&gt; prev = l.prev;
        l.item = null;
        l.prev = null; // help GC
        last = prev;
        if (prev == null)
            first = null;
        else
            prev.next = null;
        size--;
        modCount++;
        return element;
    }

    /**
     * Unlinks non-null node x.
     * 移除某个节点，
     * 将当前节点的上一个节点的next指向当前节点的下一个节点，
     * 将当前节点的下一个节点的prev指向当前节点的上一个节点。
     */
    E unlink(Node&lt;E&gt; x) {
        // assert x != null;
        final E element = x.item;
        final Node&lt;E&gt; next = x.next;
        final Node&lt;E&gt; prev = x.prev;

        if (prev == null) {
            first = next;
        } else {
            prev.next = next;
            x.prev = null;
        }

        if (next == null) {
            last = prev;
        } else {
            next.prev = prev;
            x.next = null;
        }

        x.item = null;
        size--;
        modCount++;
        return element;
    }

    /**
     * Returns the first element in this list.
     *
     * @return the first element in this list
     * @throws NoSuchElementException if this list is empty
     */
    public E getFirst() {
        final Node&lt;E&gt; f = first;
        if (f == null)
            throw new NoSuchElementException();
        return f.item;
    }

    /**
     * Returns the last element in this list.
     *
     * @return the last element in this list
     * @throws NoSuchElementException if this list is empty
     */
    public E getLast() {
        final Node&lt;E&gt; l = last;
        if (l == null)
            throw new NoSuchElementException();
        return l.item;
    }

    /**
     * Removes and returns the first element from this list.
     *
     * @return the first element from this list
     * @throws NoSuchElementException if this list is empty
     */
    public E removeFirst() {
        final Node&lt;E&gt; f = first;
        if (f == null)
            throw new NoSuchElementException();
        return unlinkFirst(f);
    }

    /**
     * Removes and returns the last element from this list.
     *
     * @return the last element from this list
     * @throws NoSuchElementException if this list is empty
     */
    public E removeLast() {
        final Node&lt;E&gt; l = last;
        if (l == null)
            throw new NoSuchElementException();
        return unlinkLast(l);
    }

    /**
     * Inserts the specified element at the beginning of this list.
     *
     * @param e the element to add
     */
    public void addFirst(E e) {
        linkFirst(e);
    }

    /**
     * Appends the specified element to the end of this list.
     *
     * &lt;p&gt;This method is equivalent to {@link #add}.
     *
     * @param e the element to add
     */
    public void addLast(E e) {
        linkLast(e);
    }

    /**
     * Returns {@code true} if this list contains the specified element.
     * More formally, returns {@code true} if and only if this list contains
     * at least one element {@code e} such that
     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.
     *
     * @param o element whose presence in this list is to be tested
     * @return {@code true} if this list contains the specified element
     */
    public boolean contains(Object o) {
        return indexOf(o) != -1;
    }

    /**
     * Returns the number of elements in this list.
     *
     * @return the number of elements in this list
     */
    public int size() {
        return size;
    }

    /**
     * Appends the specified element to the end of this list.
     *
     * &lt;p&gt;This method is equivalent to {@link #addLast}.
     *
     * @param e element to be appended to this list
     * @return {@code true} (as specified by {@link Collection#add})
     */
    public boolean add(E e) {
        linkLast(e);
        return true;
    }

    /**
     * Removes the first occurrence of the specified element from this list,
     * if it is present.  If this list does not contain the element, it is
     * unchanged.  More formally, removes the element with the lowest index
     * {@code i} such that
     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;
     * (if such an element exists).  Returns {@code true} if this list
     * contained the specified element (or equivalently, if this list
     * changed as a result of the call).
     *
     * @param o element to be removed from this list, if present
     * @return {@code true} if this list contained the specified element
     */
    public boolean remove(Object o) {
        if (o == null) {
            for (Node&lt;E&gt; x = first; x != null; x = x.next) {
                if (x.item == null) {
                    unlink(x);
                    return true;
                }
            }
        } else {
            for (Node&lt;E&gt; x = first; x != null; x = x.next) {
                if (o.equals(x.item)) {
                    unlink(x);
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Appends all of the elements in the specified collection to the end of
     * this list, in the order that they are returned by the specified
     * collection's iterator.  The behavior of this operation is undefined if
     * the specified collection is modified while the operation is in
     * progress.  (Note that this will occur if the specified collection is
     * this list, and it's nonempty.)
     *
     * @param c collection containing elements to be added to this list
     * @return {@code true} if this list changed as a result of the call
     * @throws NullPointerException if the specified collection is null
     */
    public boolean addAll(Collection&lt;? extends E&gt; c) {
        return addAll(size, c);
    }

    /**
     * Inserts all of the elements in the specified collection into this
     * list, starting at the specified position.  Shifts the element
     * currently at that position (if any) and any subsequent elements to
     * the right (increases their indices).  The new elements will appear
     * in the list in the order that they are returned by the
     * specified collection's iterator.
     *
     * @param index index at which to insert the first element
     *              from the specified collection
     * @param c     collection containing elements to be added to this list
     * @return {@code true} if this list changed as a result of the call
     * @throws IndexOutOfBoundsException {@inheritDoc}
     * @throws NullPointerException      if the specified collection is null
     */
    public boolean addAll(int index, Collection&lt;? extends E&gt; c) {
        checkPositionIndex(index);

        Object[] a = c.toArray();
        int numNew = a.length;
        if (numNew == 0)
            return false;

        Node&lt;E&gt; pred, succ;
        if (index == size) {
            succ = null;
            pred = last;
        } else {
            succ = node(index);
            pred = succ.prev;
        }

        for (Object o : a) {
            @SuppressWarnings(&quot;unchecked&quot;) E e = (E) o;
            Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, null);
            if (pred == null)
                first = newNode;
            else
                pred.next = newNode;
            pred = newNode;
        }

        if (succ == null) {
            last = pred;
        } else {
            pred.next = succ;
            succ.prev = pred;
        }

        size += numNew;
        modCount++;
        return true;
    }

    /**
     * Removes all of the elements from this list.
     * The list will be empty after this call returns.
     */
    public void clear() {
        // Clearing all of the links between nodes is &quot;unnecessary&quot;, but:
        // - helps a generational GC if the discarded nodes inhabit
        //   more than one generation
        // - is sure to free memory even if there is a reachable Iterator
        for (Node&lt;E&gt; x = first; x != null; ) {
            Node&lt;E&gt; next = x.next;
            x.item = null;
            x.next = null;
            x.prev = null;
            x = next;
        }
        first = last = null;
        size = 0;
        modCount++;
    }


    // Positional Access Operations

    /**
     * Returns the element at the specified position in this list.
     *
     * @param index index of the element to return
     * @return the element at the specified position in this list
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    public E get(int index) {
        checkElementIndex(index);
        return node(index).item;
    }

    /**
     * Replaces the element at the specified position in this list with the
     * specified element.
     *
     * @param index   index of the element to replace
     * @param element element to be stored at the specified position
     * @return the element previously at the specified position
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    public E set(int index, E element) {
        checkElementIndex(index);
        Node&lt;E&gt; x = node(index);
        E oldVal = x.item;
        x.item = element;
        return oldVal;
    }

    /**
     * Inserts the specified element at the specified position in this list.
     * Shifts the element currently at that position (if any) and any
     * subsequent elements to the right (adds one to their indices).
     *
     * @param index   index at which the specified element is to be inserted
     * @param element element to be inserted
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    public void add(int index, E element) {
        checkPositionIndex(index);

        if (index == size)
            linkLast(element);
        else
            linkBefore(element, node(index));
    }

    /**
     * Removes the element at the specified position in this list.  Shifts any
     * subsequent elements to the left (subtracts one from their indices).
     * Returns the element that was removed from the list.
     *
     * @param index the index of the element to be removed
     * @return the element previously at the specified position
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    public E remove(int index) {
        checkElementIndex(index);
        return unlink(node(index));
    }

    /**
     * Tells if the argument is the index of an existing element.
     */
    private boolean isElementIndex(int index) {
        return index &gt;= 0 &amp;&amp; index &lt; size;
    }

    /**
     * Tells if the argument is the index of a valid position for an
     * iterator or an add operation.
     */
    private boolean isPositionIndex(int index) {
        return index &gt;= 0 &amp;&amp; index &lt;= size;
    }

    /**
     * Constructs an IndexOutOfBoundsException detail message.
     * Of the many possible refactorings of the error handling code,
     * this &quot;outlining&quot; performs best with both server and client VMs.
     */
    private String outOfBoundsMsg(int index) {
        return &quot;Index: &quot; + index + &quot;, Size: &quot; + size;
    }

    private void checkElementIndex(int index) {
        if (!isElementIndex(index))
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
    }

    private void checkPositionIndex(int index) {
        if (!isPositionIndex(index))
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
    }

    /**
     * Returns the (non-null) Node at the specified element index.
     */
    Node&lt;E&gt; node(int index) {
        // assert isElementIndex(index);

        if (index &lt; (size &gt;&gt; 1)) {
            Node&lt;E&gt; x = first;
            for (int i = 0; i &lt; index; i++)
                x = x.next;
            return x;
        } else {
            Node&lt;E&gt; x = last;
            for (int i = size - 1; i &gt; index; i--)
                x = x.prev;
            return x;
        }
    }

    // Search Operations

    /**
     * Returns the index of the first occurrence of the specified element
     * in this list, or -1 if this list does not contain the element.
     * More formally, returns the lowest index {@code i} such that
     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,
     * or -1 if there is no such index.
     *
     * @param o element to search for
     * @return the index of the first occurrence of the specified element in
     * this list, or -1 if this list does not contain the element
     */
    public int indexOf(Object o) {
        int index = 0;
        if (o == null) {
            for (Node&lt;E&gt; x = first; x != null; x = x.next) {
                if (x.item == null)
                    return index;
                index++;
            }
        } else {
            for (Node&lt;E&gt; x = first; x != null; x = x.next) {
                if (o.equals(x.item))
                    return index;
                index++;
            }
        }
        return -1;
    }

    /**
     * Returns the index of the last occurrence of the specified element
     * in this list, or -1 if this list does not contain the element.
     * More formally, returns the highest index {@code i} such that
     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,
     * or -1 if there is no such index.
     *
     * @param o element to search for
     * @return the index of the last occurrence of the specified element in
     * this list, or -1 if this list does not contain the element
     */
    public int lastIndexOf(Object o) {
        int index = size;
        if (o == null) {
            for (Node&lt;E&gt; x = last; x != null; x = x.prev) {
                index--;
                if (x.item == null)
                    return index;
            }
        } else {
            for (Node&lt;E&gt; x = last; x != null; x = x.prev) {
                index--;
                if (o.equals(x.item))
                    return index;
            }
        }
        return -1;
    }

    // Queue operations.

    /**
     * Retrieves, but does not remove, the head (first element) of this list.
     *
     * @return the head of this list, or {@code null} if this list is empty
     * @since 1.5
     */
    public E peek() {
        final Node&lt;E&gt; f = first;
        return (f == null) ? null : f.item;
    }

    /**
     * Retrieves, but does not remove, the head (first element) of this list.
     *
     * @return the head of this list
     * @throws NoSuchElementException if this list is empty
     * @since 1.5
     */
    public E element() {
        return getFirst();
    }

    /**
     * Retrieves and removes the head (first element) of this list.
     *
     * @return the head of this list, or {@code null} if this list is empty
     * @since 1.5
     */
    public E poll() {
        final Node&lt;E&gt; f = first;
        return (f == null) ? null : unlinkFirst(f);
    }

    /**
     * Retrieves and removes the head (first element) of this list.
     *
     * @return the head of this list
     * @throws NoSuchElementException if this list is empty
     * @since 1.5
     */
    public E remove() {
        return removeFirst();
    }

    /**
     * Adds the specified element as the tail (last element) of this list.
     *
     * @param e the element to add
     * @return {@code true} (as specified by {@link Queue#offer})
     * @since 1.5
     */
    public boolean offer(E e) {
        return add(e);
    }

    // Deque operations

    /**
     * Inserts the specified element at the front of this list.
     *
     * @param e the element to insert
     * @return {@code true} (as specified by {@link Deque#offerFirst})
     * @since 1.6
     */
    public boolean offerFirst(E e) {
        addFirst(e);
        return true;
    }

    /**
     * Inserts the specified element at the end of this list.
     *
     * @param e the element to insert
     * @return {@code true} (as specified by {@link Deque#offerLast})
     * @since 1.6
     */
    public boolean offerLast(E e) {
        addLast(e);
        return true;
    }

    /**
     * Retrieves, but does not remove, the first element of this list,
     * or returns {@code null} if this list is empty.
     *
     * @return the first element of this list, or {@code null}
     * if this list is empty
     * @since 1.6
     */
    public E peekFirst() {
        final Node&lt;E&gt; f = first;
        return (f == null) ? null : f.item;
    }

    /**
     * Retrieves, but does not remove, the last element of this list,
     * or returns {@code null} if this list is empty.
     *
     * @return the last element of this list, or {@code null}
     * if this list is empty
     * @since 1.6
     */
    public E peekLast() {
        final Node&lt;E&gt; l = last;
        return (l == null) ? null : l.item;
    }

    /**
     * Retrieves and removes the first element of this list,
     * or returns {@code null} if this list is empty.
     *
     * @return the first element of this list, or {@code null} if
     * this list is empty
     * @since 1.6
     */
    public E pollFirst() {
        final Node&lt;E&gt; f = first;
        return (f == null) ? null : unlinkFirst(f);
    }

    /**
     * Retrieves and removes the last element of this list,
     * or returns {@code null} if this list is empty.
     *
     * @return the last element of this list, or {@code null} if
     * this list is empty
     * @since 1.6
     */
    public E pollLast() {
        final Node&lt;E&gt; l = last;
        return (l == null) ? null : unlinkLast(l);
    }

    /**
     * Pushes an element onto the stack represented by this list.  In other
     * words, inserts the element at the front of this list.
     *
     * &lt;p&gt;This method is equivalent to {@link #addFirst}.
     *
     * @param e the element to push
     * @since 1.6
     */
    public void push(E e) {
        addFirst(e);
    }

    /**
     * Pops an element from the stack represented by this list.  In other
     * words, removes and returns the first element of this list.
     *
     * &lt;p&gt;This method is equivalent to {@link #removeFirst()}.
     *
     * @return the element at the front of this list (which is the top
     * of the stack represented by this list)
     * @throws NoSuchElementException if this list is empty
     * @since 1.6
     */
    public E pop() {
        return removeFirst();
    }

    /**
     * Removes the first occurrence of the specified element in this
     * list (when traversing the list from head to tail).  If the list
     * does not contain the element, it is unchanged.
     *
     * @param o element to be removed from this list, if present
     * @return {@code true} if the list contained the specified element
     * @since 1.6
     */
    public boolean removeFirstOccurrence(Object o) {
        return remove(o);
    }

    /**
     * Removes the last occurrence of the specified element in this
     * list (when traversing the list from head to tail).  If the list
     * does not contain the element, it is unchanged.
     *
     * @param o element to be removed from this list, if present
     * @return {@code true} if the list contained the specified element
     * @since 1.6
     */
    public boolean removeLastOccurrence(Object o) {
        if (o == null) {
            for (Node&lt;E&gt; x = last; x != null; x = x.prev) {
                if (x.item == null) {
                    unlink(x);
                    return true;
                }
            }
        } else {
            for (Node&lt;E&gt; x = last; x != null; x = x.prev) {
                if (o.equals(x.item)) {
                    unlink(x);
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Returns a list-iterator of the elements in this list (in proper
     * sequence), starting at the specified position in the list.
     * Obeys the general contract of {@code List.listIterator(int)}.&lt;p&gt;
     * &lt;p&gt;
     * The list-iterator is &lt;i&gt;fail-fast&lt;/i&gt;: if the list is structurally
     * modified at any time after the Iterator is created, in any way except
     * through the list-iterator's own {@code remove} or {@code add}
     * methods, the list-iterator will throw a
     * {@code ConcurrentModificationException}.  Thus, in the face of
     * concurrent modification, the iterator fails quickly and cleanly, rather
     * than risking arbitrary, non-deterministic behavior at an undetermined
     * time in the future.
     *
     * @param index index of the first element to be returned from the
     *              list-iterator (by a call to {@code next})
     * @return a ListIterator of the elements in this list (in proper
     * sequence), starting at the specified position in the list
     * @throws IndexOutOfBoundsException {@inheritDoc}
     * @see List#listIterator(int)
     */
    public ListIterator&lt;E&gt; listIterator(int index) {
        checkPositionIndex(index);
        return new ListItr(index);
    }

    private class ListItr implements ListIterator&lt;E&gt; {
        private Node&lt;E&gt; lastReturned;
        private Node&lt;E&gt; next;
        private int nextIndex;
        private int expectedModCount = modCount;

        ListItr(int index) {
            // assert isPositionIndex(index);
            next = (index == size) ? null : node(index);
            nextIndex = index;
        }

        public boolean hasNext() {
            return nextIndex &lt; size;
        }

        public E next() {
            checkForComodification();
            if (!hasNext())
                throw new NoSuchElementException();

            lastReturned = next;
            next = next.next;
            nextIndex++;
            return lastReturned.item;
        }

        public boolean hasPrevious() {
            return nextIndex &gt; 0;
        }

        public E previous() {
            checkForComodification();
            if (!hasPrevious())
                throw new NoSuchElementException();

            lastReturned = next = (next == null) ? last : next.prev;
            nextIndex--;
            return lastReturned.item;
        }

        public int nextIndex() {
            return nextIndex;
        }

        public int previousIndex() {
            return nextIndex - 1;
        }

        public void remove() {
            checkForComodification();
            if (lastReturned == null)
                throw new IllegalStateException();

            Node&lt;E&gt; lastNext = lastReturned.next;
            unlink(lastReturned);
            if (next == lastReturned)
                next = lastNext;
            else
                nextIndex--;
            lastReturned = null;
            expectedModCount++;
        }

        public void set(E e) {
            if (lastReturned == null)
                throw new IllegalStateException();
            checkForComodification();
            lastReturned.item = e;
        }

        public void add(E e) {
            checkForComodification();
            lastReturned = null;
            if (next == null)
                linkLast(e);
            else
                linkBefore(e, next);
            nextIndex++;
            expectedModCount++;
        }

        public void forEachRemaining(Consumer&lt;? super E&gt; action) {
            Objects.requireNonNull(action);
            while (modCount == expectedModCount &amp;&amp; nextIndex &lt; size) {
                action.accept(next.item);
                lastReturned = next;
                next = next.next;
                nextIndex++;
            }
            checkForComodification();
        }

        final void checkForComodification() {
            if (modCount != expectedModCount)
                throw new ConcurrentModificationException();
        }
    }

    private static class Node&lt;E&gt; {
        E item;
        Node&lt;E&gt; next;
        Node&lt;E&gt; prev;

        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) {
            this.item = element;
            this.next = next;
            this.prev = prev;
        }
    }

    /**
     * @since 1.6
     */
    public Iterator&lt;E&gt; descendingIterator() {
        return new DescendingIterator();
    }

    /**
     * Adapter to provide descending iterators via ListItr.previous
     */
    private class DescendingIterator implements Iterator&lt;E&gt; {
        private final ListItr itr = new ListItr(size());

        public boolean hasNext() {
            return itr.hasPrevious();
        }

        public E next() {
            return itr.previous();
        }

        public void remove() {
            itr.remove();
        }
    }

    @SuppressWarnings(&quot;unchecked&quot;)
    private LinkedList&lt;E&gt; superClone() {
        try {
            return (LinkedList&lt;E&gt;) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new InternalError(e);
        }
    }

    /**
     * Returns a shallow copy of this {@code LinkedList}. (The elements
     * themselves are not cloned.)
     *
     * @return a shallow copy of this {@code LinkedList} instance
     */
    public Object clone() {
        LinkedList&lt;E&gt; clone = superClone();

        // Put clone into &quot;virgin&quot; state
        clone.first = clone.last = null;
        clone.size = 0;
        clone.modCount = 0;

        // Initialize clone with our elements
        for (Node&lt;E&gt; x = first; x != null; x = x.next)
            clone.add(x.item);

        return clone;
    }

    /**
     * Returns an array containing all of the elements in this list
     * in proper sequence (from first to last element).
     *
     * &lt;p&gt;The returned array will be &quot;safe&quot; in that no references to it are
     * maintained by this list.  (In other words, this method must allocate
     * a new array).  The caller is thus free to modify the returned array.
     *
     * &lt;p&gt;This method acts as bridge between array-based and collection-based
     * APIs.
     *
     * @return an array containing all of the elements in this list
     * in proper sequence
     */
    public Object[] toArray() {
        Object[] result = new Object[size];
        int i = 0;
        for (Node&lt;E&gt; x = first; x != null; x = x.next)
            result[i++] = x.item;
        return result;
    }

    /**
     * Returns an array containing all of the elements in this list in
     * proper sequence (from first to last element); the runtime type of
     * the returned array is that of the specified array.  If the list fits
     * in the specified array, it is returned therein.  Otherwise, a new
     * array is allocated with the runtime type of the specified array and
     * the size of this list.
     *
     * &lt;p&gt;If the list fits in the specified array with room to spare (i.e.,
     * the array has more elements than the list), the element in the array
     * immediately following the end of the list is set to {@code null}.
     * (This is useful in determining the length of the list &lt;i&gt;only&lt;/i&gt; if
     * the caller knows that the list does not contain any null elements.)
     *
     * &lt;p&gt;Like the {@link #toArray()} method, this method acts as bridge between
     * array-based and collection-based APIs.  Further, this method allows
     * precise control over the runtime type of the output array, and may,
     * under certain circumstances, be used to save allocation costs.
     *
     * &lt;p&gt;Suppose {@code x} is a list known to contain only strings.
     * The following code can be used to dump the list into a newly
     * allocated array of {@code String}:
     *
     * &lt;pre&gt;
     *     String[] y = x.toArray(new String[0]);&lt;/pre&gt;
     * &lt;p&gt;
     * Note that {@code toArray(new Object[0])} is identical in function to
     * {@code toArray()}.
     *
     * @param a the array into which the elements of the list are to
     *          be stored, if it is big enough; otherwise, a new array of the
     *          same runtime type is allocated for this purpose.
     * @return an array containing the elements of the list
     * @throws ArrayStoreException  if the runtime type of the specified array
     *                              is not a supertype of the runtime type of every element in
     *                              this list
     * @throws NullPointerException if the specified array is null
     */
    @SuppressWarnings(&quot;unchecked&quot;)
    public &lt;T&gt; T[] toArray(T[] a) {
        if (a.length &lt; size)
            a = (T[]) java.lang.reflect.Array.newInstance(
                    a.getClass().getComponentType(), size);
        int i = 0;
        Object[] result = a;
        for (Node&lt;E&gt; x = first; x != null; x = x.next)
            result[i++] = x.item;

        if (a.length &gt; size)
            a[size] = null;

        return a;
    }

    private static final long serialVersionUID = 876323262645176354L;

    /**
     * Saves the state of this {@code LinkedList} instance to a stream
     * (that is, serializes it).
     *
     * @serialData The size of the list (the number of elements it
     * contains) is emitted (int), followed by all of its
     * elements (each an Object) in the proper order.
     */
    private void writeObject(java.io.ObjectOutputStream s)
            throws java.io.IOException {
        // Write out any hidden serialization magic
        s.defaultWriteObject();

        // Write out size
        s.writeInt(size);

        // Write out all elements in the proper order.
        for (Node&lt;E&gt; x = first; x != null; x = x.next)
            s.writeObject(x.item);
    }

    /**
     * Reconstitutes this {@code LinkedList} instance from a stream
     * (that is, deserializes it).
     */
    @SuppressWarnings(&quot;unchecked&quot;)
    private void readObject(java.io.ObjectInputStream s)
            throws java.io.IOException, ClassNotFoundException {
        // Read in any hidden serialization magic
        s.defaultReadObject();

        // Read in size
        int size = s.readInt();

        // Read in all elements in the proper order.
        for (int i = 0; i &lt; size; i++)
            linkLast((E) s.readObject());
    }

    /**
     * Creates a &lt;em&gt;&lt;a href=&quot;Spliterator.html#binding&quot;&gt;late-binding&lt;/a&gt;&lt;/em&gt;
     * and &lt;em&gt;fail-fast&lt;/em&gt; {@link Spliterator} over the elements in this
     * list.
     *
     * &lt;p&gt;The {@code Spliterator} reports {@link Spliterator#SIZED} and
     * {@link Spliterator#ORDERED}.  Overriding implementations should document
     * the reporting of additional characteristic values.
     *
     * @return a {@code Spliterator} over the elements in this list
     * @implNote The {@code Spliterator} additionally reports {@link Spliterator#SUBSIZED}
     * and implements {@code trySplit} to permit limited parallelism..
     * @since 1.8
     */
    @Override
    public Spliterator&lt;E&gt; spliterator() {
        return new LLSpliterator&lt;E&gt;(this, -1, 0);
    }

    /**
     * A customized variant of Spliterators.IteratorSpliterator
     */
    static final class LLSpliterator&lt;E&gt; implements Spliterator&lt;E&gt; {
        static final int BATCH_UNIT = 1 &lt;&lt; 10;  // batch array size increment
        static final int MAX_BATCH = 1 &lt;&lt; 25;  // max batch array size;
        final LinkedList&lt;E&gt; list; // null OK unless traversed
        Node&lt;E&gt; current;      // current node; null until initialized
        int est;              // size estimate; -1 until first needed
        int expectedModCount; // initialized when est set
        int batch;            // batch size for splits

        LLSpliterator(LinkedList&lt;E&gt; list, int est, int expectedModCount) {
            this.list = list;
            this.est = est;
            this.expectedModCount = expectedModCount;
        }

        final int getEst() {
            int s; // force initialization
            final LinkedList&lt;E&gt; lst;
            if ((s = est) &lt; 0) {
                if ((lst = list) == null)
                    s = est = 0;
                else {
                    expectedModCount = lst.modCount;
                    current = lst.first;
                    s = est = lst.size;
                }
            }
            return s;
        }

        public long estimateSize() {
            return (long) getEst();
        }

        public Spliterator&lt;E&gt; trySplit() {
            Node&lt;E&gt; p;
            int s = getEst();
            if (s &gt; 1 &amp;&amp; (p = current) != null) {
                int n = batch + BATCH_UNIT;
                if (n &gt; s)
                    n = s;
                if (n &gt; MAX_BATCH)
                    n = MAX_BATCH;
                Object[] a = new Object[n];
                int j = 0;
                do {
                    a[j++] = p.item;
                } while ((p = p.next) != null &amp;&amp; j &lt; n);
                current = p;
                batch = j;
                est = s - j;
                return Spliterators.spliterator(a, 0, j, Spliterator.ORDERED);
            }
            return null;
        }

        public void forEachRemaining(Consumer&lt;? super E&gt; action) {
            Node&lt;E&gt; p;
            int n;
            if (action == null) throw new NullPointerException();
            if ((n = getEst()) &gt; 0 &amp;&amp; (p = current) != null) {
                current = null;
                est = 0;
                do {
                    E e = p.item;
                    p = p.next;
                    action.accept(e);
                } while (p != null &amp;&amp; --n &gt; 0);
            }
            if (list.modCount != expectedModCount)
                throw new ConcurrentModificationException();
        }

        public boolean tryAdvance(Consumer&lt;? super E&gt; action) {
            Node&lt;E&gt; p;
            if (action == null) throw new NullPointerException();
            if (getEst() &gt; 0 &amp;&amp; (p = current) != null) {
                --est;
                E e = p.item;
                current = p.next;
                action.accept(e);
                if (list.modCount != expectedModCount)
                    throw new ConcurrentModificationException();
                return true;
            }
            return false;
        }

        public int characteristics() {
            return Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED;
        }
    }

}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[阅读jdk8 ArrayList源码]]></title>
        <id>https://Slice1129.github.io/post/java-ji-he-22-ti/</id>
        <link href="https://Slice1129.github.io/post/java-ji-he-22-ti/">
        </link>
        <updated>2020-05-07T09:42:46.000Z</updated>
        <content type="html"><![CDATA[<pre><code>/*
 * Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

package java.util;

import sun.misc.SharedSecrets;

import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;

/**
 * Resizable-array implementation of the &lt;tt&gt;List&lt;/tt&gt; interface.  Implements
 * all optional list operations, and permits all elements, including
 * &lt;tt&gt;null&lt;/tt&gt;.  In addition to implementing the &lt;tt&gt;List&lt;/tt&gt; interface,
 * this class provides methods to manipulate the size of the array that is
 * used internally to store the list.  (This class is roughly equivalent to
 * &lt;tt&gt;Vector&lt;/tt&gt;, except that it is unsynchronized.)
 *
 * &lt;p&gt;The &lt;tt&gt;size&lt;/tt&gt;, &lt;tt&gt;isEmpty&lt;/tt&gt;, &lt;tt&gt;get&lt;/tt&gt;, &lt;tt&gt;set&lt;/tt&gt;,
 * &lt;tt&gt;iterator&lt;/tt&gt;, and &lt;tt&gt;listIterator&lt;/tt&gt; operations run in constant
 * time.  The &lt;tt&gt;add&lt;/tt&gt; operation runs in &lt;i&gt;amortized constant time&lt;/i&gt;,
 * that is, adding n elements requires O(n) time.  All of the other operations
 * run in linear time (roughly speaking).  The constant factor is low compared
 * to that for the &lt;tt&gt;LinkedList&lt;/tt&gt; implementation.
 *
 * &lt;p&gt;Each &lt;tt&gt;ArrayList&lt;/tt&gt; instance has a &lt;i&gt;capacity&lt;/i&gt;.  The capacity is
 * the size of the array used to store the elements in the list.  It is always
 * at least as large as the list size.  As elements are added to an ArrayList,
 * its capacity grows automatically.  The details of the growth policy are not
 * specified beyond the fact that adding an element has constant amortized
 * time cost.
 *
 * &lt;p&gt;An application can increase the capacity of an &lt;tt&gt;ArrayList&lt;/tt&gt; instance
 * before adding a large number of elements using the &lt;tt&gt;ensureCapacity&lt;/tt&gt;
 * operation.  This may reduce the amount of incremental reallocation.
 *
 * &lt;p&gt;&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt;
 * If multiple threads access an &lt;tt&gt;ArrayList&lt;/tt&gt; instance concurrently,
 * and at least one of the threads modifies the list structurally, it
 * &lt;i&gt;must&lt;/i&gt; be synchronized externally.  (A structural modification is
 * any operation that adds or deletes one or more elements, or explicitly
 * resizes the backing array; merely setting the value of an element is not
 * a structural modification.)  This is typically accomplished by
 * synchronizing on some object that naturally encapsulates the list.
 * &lt;p&gt;
 * If no such object exists, the list should be &quot;wrapped&quot; using the
 * {@link Collections#synchronizedList Collections.synchronizedList}
 * method.  This is best done at creation time, to prevent accidental
 * unsynchronized access to the list:&lt;pre&gt;
 *   List list = Collections.synchronizedList(new ArrayList(...));&lt;/pre&gt;
 *
 * &lt;p&gt;&lt;a name=&quot;fail-fast&quot;&gt;
 * The iterators returned by this class's {@link #iterator() iterator} and
 * {@link #listIterator(int) listIterator} methods are &lt;em&gt;fail-fast&lt;/em&gt;:&lt;/a&gt;
 * if the list is structurally modified at any time after the iterator is
 * created, in any way except through the iterator's own
 * {@link ListIterator#remove() remove} or
 * {@link ListIterator#add(Object) add} methods, the iterator will throw a
 * {@link ConcurrentModificationException}.  Thus, in the face of
 * concurrent modification, the iterator fails quickly and cleanly, rather
 * than risking arbitrary, non-deterministic behavior at an undetermined
 * time in the future.
 *
 * &lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed
 * as it is, generally speaking, impossible to make any hard guarantees in the
 * presence of unsynchronized concurrent modification.  Fail-fast iterators
 * throw {@code ConcurrentModificationException} on a best-effort basis.
 * Therefore, it would be wrong to write a program that depended on this
 * exception for its correctness:  &lt;i&gt;the fail-fast behavior of iterators
 * should be used only to detect bugs.&lt;/i&gt;
 *
 * &lt;p&gt;This class is a member of the
 * &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
 * Java Collections Framework&lt;/a&gt;.
 *
 * @author Josh Bloch
 * @author Neal Gafter
 * @see Collection
 * @see List
 * @see LinkedList
 * @see Vector
 * @since 1.2
 */

public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;
        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable {
    private static final long serialVersionUID = 8683452581122892189L;

    /**
     * Default initial capacity.
     * 默认初始化容量
     */
    private static final int DEFAULT_CAPACITY = 10;

    /**
     * Shared empty array instance used for empty instances.
     * 创建对象时传参initialCapacity容量为0时，赋值给elementData的空数组
     */
    private static final Object[] EMPTY_ELEMENTDATA = {};

    /**
     * Shared empty array instance used for default sized empty instances. We
     * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when
     * first element is added.
     * 创建对象时，默认赋值给elementData的空数组
     */
    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};

    /**
     * The array buffer into which the elements of the ArrayList are stored.
     * The capacity of the ArrayList is the length of this array buffer. Any
     * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA
     * will be expanded to DEFAULT_CAPACITY when the first element is added.
     * 实际存储对象的数组
     */
    transient Object[] elementData; // non-private to simplify nested class access

    /**
     * The size of the ArrayList (the number of elements it contains).
     * 实际存储的数量，不是上方elementData的长度
     *
     * @serial
     */
    private int size;

    /**
     * Constructs an empty list with the specified initial capacity.
     * 如果initialCapacity大于0，则创建实际大小的数组，等于0，则赋值空数组，小于0抛出异常
     *
     * @param initialCapacity the initial capacity of the list
     * @throws IllegalArgumentException if the specified initial capacity
     *                                  is negative
     */
    public ArrayList(int initialCapacity) {
        if (initialCapacity &gt; 0) {
            this.elementData = new Object[initialCapacity];
        } else if (initialCapacity == 0) {
            this.elementData = EMPTY_ELEMENTDATA;
        } else {
            throw new IllegalArgumentException(&quot;Illegal Capacity: &quot; +
                    initialCapacity);
        }
    }

    /**
     * Constructs an empty list with an initial capacity of ten.
     * 日常使用最多的初始化方式，将空数组赋值给elementData
     */
    public ArrayList() {
        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
    }

    /**
     * Constructs a list containing the elements of the specified
     * collection, in the order they are returned by the collection's
     * iterator.
     * 将另一个容器类型的对象传参初始化，如果传的值长度为0，则直接将空数组赋值，否则将参数不是Object类型的复制一份。
     *
     * @param c the collection whose elements are to be placed into this list
     * @throws NullPointerException if the specified collection is null
     */
    public ArrayList(Collection&lt;? extends E&gt; c) {
        elementData = c.toArray();
        if ((size = elementData.length) != 0) {
            // c.toArray might (incorrectly) not return Object[] (see 6260652)
            //虽然elementData是Object[]类型的，但它指向的不一定是Object[]类型，所以要进行判断
            if (elementData.getClass() != Object[].class)
                elementData = Arrays.copyOf(elementData, size, Object[].class);
        } else {
            // replace with empty array.
            this.elementData = EMPTY_ELEMENTDATA;
        }
    }

    /**
     * Trims the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance to be the
     * list's current size.  An application can use this operation to minimize
     * the storage of an &lt;tt&gt;ArrayList&lt;/tt&gt; instance.
     * 修改这个ArrayList实例的容量是列表的当前大小。
     * 应用程序可以使用此操作来最小化ArrayList实例的存储。
     */
    public void trimToSize() {
        modCount++;
        if (size &lt; elementData.length) {
            elementData = (size == 0)
                    ? EMPTY_ELEMENTDATA
                    : Arrays.copyOf(elementData, size);
        }
    }

    /**
     * Increases the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance, if
     * necessary, to ensure that it can hold at least the number of elements
     * specified by the minimum capacity argument.
     * 增加此 ArrayList实例的容量，以确保它至少可以容纳最小容量参数指定的元素数。
     *
     * @param minCapacity the desired minimum capacity
     */
    public void ensureCapacity(int minCapacity) {
        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)
                // any size if not default element table
                ? 0
                // larger than default for default empty table. It's already
                // supposed to be at default size.
                : DEFAULT_CAPACITY;

        if (minCapacity &gt; minExpand) {
            ensureExplicitCapacity(minCapacity);
        }
    }

    /**
     * 如果elementData是空的，则返回DEFAULT_CAPACITY=10，否则返回size+1
     *
     * @param elementData
     * @param minCapacity size+1后的值
     * @return
     */
    private static int calculateCapacity(Object[] elementData, int minCapacity) {
        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
            return Math.max(DEFAULT_CAPACITY, minCapacity);
        }
        return minCapacity;
    }

    /**
     * 检查容量，如果不足就扩容
     *
     * @param minCapacity
     */
    private void ensureCapacityInternal(int minCapacity) {
        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));
    }

    /**
     * add方法 操作次数+1
     *
     * @param minCapacity
     */
    private void ensureExplicitCapacity(int minCapacity) {
        modCount++;

        // overflow-conscious code
        if (minCapacity - elementData.length &gt; 0)
            grow(minCapacity);
    }

    /**
     * The maximum size of array to allocate.
     * Some VMs reserve some header words in an array.
     * Attempts to allocate larger arrays may result in
     * OutOfMemoryError: Requested array size exceeds VM limit
     * 数组最大长度
     */
    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;

    /**
     * Increases the capacity to ensure that it can hold at least the
     * number of elements specified by the minimum capacity argument.
     * 扩容
     *
     * @param minCapacity the desired minimum capacity
     */
    private void grow(int minCapacity) {
        // overflow-conscious code
        //旧数组长度
        int oldCapacity = elementData.length;
        //新数组长度=旧数组长度+旧数组长度/2
        int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);
        //这种情况也就空初始化时生效，新数组长度 - 最小容量小于0，则新数组长度=最小容量
        if (newCapacity - minCapacity &lt; 0)
            newCapacity = minCapacity;
        if (newCapacity - MAX_ARRAY_SIZE &gt; 0)
            newCapacity = hugeCapacity(minCapacity);
        // minCapacity is usually close to size, so this is a win:
        elementData = Arrays.copyOf(elementData, newCapacity);
    }

    private static int hugeCapacity(int minCapacity) {
        if (minCapacity &lt; 0) // overflow
            throw new OutOfMemoryError();
        return (minCapacity &gt; MAX_ARRAY_SIZE) ?
                Integer.MAX_VALUE :
                MAX_ARRAY_SIZE;
    }

    /**
     * Returns the number of elements in this list.
     *
     * @return the number of elements in this list
     */
    public int size() {
        return size;
    }

    /**
     * Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains no elements.
     *
     * @return &lt;tt&gt;true&lt;/tt&gt; if this list contains no elements
     */
    public boolean isEmpty() {
        return size == 0;
    }

    /**
     * Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains the specified element.
     * More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this list contains
     * at least one element &lt;tt&gt;e&lt;/tt&gt; such that
     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.
     *
     * @param o element whose presence in this list is to be tested
     * @return &lt;tt&gt;true&lt;/tt&gt; if this list contains the specified element
     * 如果此列表包含指定的元素，则返回true 。 更正式地说，返回true当且仅当此列表包含至少一个元素e
     */
    public boolean contains(Object o) {
        return indexOf(o) &gt;= 0;
    }

    /**
     * Returns the index of the first occurrence of the specified element
     * in this list, or -1 if this list does not contain the element.
     * More formally, returns the lowest index &lt;tt&gt;i&lt;/tt&gt; such that
     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,
     * or -1 if there is no such index.
     */
    public int indexOf(Object o) {
        if (o == null) {
            for (int i = 0; i &lt; size; i++)
                if (elementData[i] == null)
                    return i;
        } else {
            for (int i = 0; i &lt; size; i++)
                if (o.equals(elementData[i]))
                    return i;
        }
        return -1;
    }

    /**
     * Returns the index of the last occurrence of the specified element
     * in this list, or -1 if this list does not contain the element.
     * More formally, returns the highest index &lt;tt&gt;i&lt;/tt&gt; such that
     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,
     * or -1 if there is no such index.
     */
    public int lastIndexOf(Object o) {
        if (o == null) {
            for (int i = size - 1; i &gt;= 0; i--)
                if (elementData[i] == null)
                    return i;
        } else {
            for (int i = size - 1; i &gt;= 0; i--)
                if (o.equals(elementData[i]))
                    return i;
        }
        return -1;
    }

    /**
     * Returns a shallow copy of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance.  (The
     * elements themselves are not copied.)
     *
     * @return a clone of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance
     */
    public Object clone() {
        try {
            ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) super.clone();
            v.elementData = Arrays.copyOf(elementData, size);
            v.modCount = 0;
            return v;
        } catch (CloneNotSupportedException e) {
            // this shouldn't happen, since we are Cloneable
            throw new InternalError(e);
        }
    }

    /**
     * Returns an array containing all of the elements in this list
     * in proper sequence (from first to last element).
     *
     * &lt;p&gt;The returned array will be &quot;safe&quot; in that no references to it are
     * maintained by this list.  (In other words, this method must allocate
     * a new array).  The caller is thus free to modify the returned array.
     *
     * &lt;p&gt;This method acts as bridge between array-based and collection-based
     * APIs.
     *
     * @return an array containing all of the elements in this list in
     * proper sequence
     * 以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组。
     * 返回的数组将是“安全的”，因为该列表不保留对它的引用。 （换句话说，这个方法必须分配一个新的数组）。 因此，调用者可以自由地修改返回的数组。
     */
    public Object[] toArray() {
        return Arrays.copyOf(elementData, size);
    }

    /**
     * Returns an array containing all of the elements in this list in proper
     * sequence (from first to last element); the runtime type of the returned
     * array is that of the specified array.  If the list fits in the
     * specified array, it is returned therein.  Otherwise, a new array is
     * allocated with the runtime type of the specified array and the size of
     * this list.
     *
     * &lt;p&gt;If the list fits in the specified array with room to spare
     * (i.e., the array has more elements than the list), the element in
     * the array immediately following the end of the collection is set to
     * &lt;tt&gt;null&lt;/tt&gt;.  (This is useful in determining the length of the
     * list &lt;i&gt;only&lt;/i&gt; if the caller knows that the list does not contain
     * any null elements.)
     *
     * @param a the array into which the elements of the list are to
     *          be stored, if it is big enough; otherwise, a new array of the
     *          same runtime type is allocated for this purpose.
     *          要存储列表的元素的数组，如果它够大; 否则，为此目的分配相同运行时类型的新数组。
     * @return an array containing the elements of the list
     * @throws ArrayStoreException  if the runtime type of the specified array
     *                              is not a supertype of the runtime type of every element in
     *                              this list
     * @throws NullPointerException if the specified array is null
     */
    @SuppressWarnings(&quot;unchecked&quot;)
    public &lt;T&gt; T[] toArray(T[] a) {
        if (a.length &lt; size)
            // Make a new array of a's runtime type, but my contents:
            return (T[]) Arrays.copyOf(elementData, size, a.getClass());
        System.arraycopy(elementData, 0, a, 0, size);
        if (a.length &gt; size)
            a[size] = null;
        return a;
    }

    // Positional Access Operations

    @SuppressWarnings(&quot;unchecked&quot;)
    E elementData(int index) {
        return (E) elementData[index];
    }

    /**
     * Returns the element at the specified position in this list.
     * 通过下标获取值
     *
     * @param index index of the element to return
     * @return the element at the specified position in this list
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    public E get(int index) {
        rangeCheck(index);

        return elementData(index);
    }

    /**
     * Replaces the element at the specified position in this list with
     * the specified element.
     * 通过下标赋新值，并返回旧值
     *
     * @param index   index of the element to replace
     * @param element element to be stored at the specified position
     * @return the element previously at the specified position
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    public E set(int index, E element) {
        rangeCheck(index);

        E oldValue = elementData(index);
        elementData[index] = element;
        return oldValue;
    }

    /**
     * Appends the specified element to the end of this list.
     * 检查容量，并追加的数组中。
     *
     * @param e element to be appended to this list
     * @return &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Collection#add})
     */
    public boolean add(E e) {
        ensureCapacityInternal(size + 1);  // Increments modCount!!
        elementData[size++] = e;
        return true;
    }

    /**
     * Inserts the specified element at the specified position in this
     * list. Shifts the element currently at that position (if any) and
     * any subsequent elements to the right (adds one to their indices).
     *
     * @param index   index at which the specified element is to be inserted
     * @param element element to be inserted
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    public void add(int index, E element) {
        rangeCheckForAdd(index);

        ensureCapacityInternal(size + 1);  // Increments modCount!!
        /**
         * src - 源数组。
         * srcPos - 源数组中的起始位置。
         * dest - 目标数组。
         * destPos - 目的地数据中的起始位置。
         * length - 要复制的数组元素的数量
         */
        System.arraycopy(elementData, index, elementData, index + 1,
                size - index);
        elementData[index] = element;
        size++;
    }

    /**
     * Removes the element at the specified position in this list.
     * Shifts any subsequent elements to the left (subtracts one from their
     * indices).
     * 通过下标删除
     *
     * @param index the index of the element to be removed
     * @return the element that was removed from the list
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    public E remove(int index) {
        rangeCheck(index);

        modCount++;
        E oldValue = elementData(index);
        //如果移除的是最后一位，则=0不复制，否则复制数组
        int numMoved = size - index - 1;
        if (numMoved &gt; 0)
            System.arraycopy(elementData, index + 1, elementData, index,
                    numMoved);
        elementData[--size] = null; // clear to let GC do its work

        return oldValue;
    }

    /**
     * Removes the first occurrence of the specified element from this list,
     * if it is present.  If the list does not contain the element, it is
     * unchanged.  More formally, removes the element with the lowest index
     * &lt;tt&gt;i&lt;/tt&gt; such that
     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;
     * (if such an element exists).  Returns &lt;tt&gt;true&lt;/tt&gt; if this list
     * contained the specified element (or equivalently, if this list
     * changed as a result of the call).
     *
     * @param o element to be removed from this list, if present
     * @return &lt;tt&gt;true&lt;/tt&gt; if this list contained the specified element
     */
    public boolean remove(Object o) {
        if (o == null) {
            for (int index = 0; index &lt; size; index++)
                if (elementData[index] == null) {
                    fastRemove(index);
                    return true;
                }
        } else {
            for (int index = 0; index &lt; size; index++)
                if (o.equals(elementData[index])) {
                    fastRemove(index);
                    return true;
                }
        }
        return false;
    }

    /*
     * Private remove method that skips bounds checking and does not
     * return the value removed.
     */
    private void fastRemove(int index) {
        modCount++;
        int numMoved = size - index - 1;
        if (numMoved &gt; 0)
            System.arraycopy(elementData, index + 1, elementData, index,
                    numMoved);
        elementData[--size] = null; // clear to let GC do its work
    }

    /**
     * Removes all of the elements from this list.  The list will
     * be empty after this call returns.
     */
    public void clear() {
        modCount++;

        // clear to let GC do its work
        for (int i = 0; i &lt; size; i++)
            elementData[i] = null;

        size = 0;
    }

    /**
     * Appends all of the elements in the specified collection to the end of
     * this list, in the order that they are returned by the
     * specified collection's Iterator.  The behavior of this operation is
     * undefined if the specified collection is modified while the operation
     * is in progress.  (This implies that the behavior of this call is
     * undefined if the specified collection is this list, and this
     * list is nonempty.)
     *
     * @param c collection containing elements to be added to this list
     * @return &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call
     * @throws NullPointerException if the specified collection is null
     */
    public boolean addAll(Collection&lt;? extends E&gt; c) {
        Object[] a = c.toArray();
        int numNew = a.length;
        ensureCapacityInternal(size + numNew);  // Increments modCount
        System.arraycopy(a, 0, elementData, size, numNew);
        size += numNew;
        return numNew != 0;
    }

    /**
     * Inserts all of the elements in the specified collection into this
     * list, starting at the specified position.  Shifts the element
     * currently at that position (if any) and any subsequent elements to
     * the right (increases their indices).  The new elements will appear
     * in the list in the order that they are returned by the
     * specified collection's iterator.
     *
     * @param index index at which to insert the first element from the
     *              specified collection
     * @param c     collection containing elements to be added to this list
     * @return &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call
     * @throws IndexOutOfBoundsException {@inheritDoc}
     * @throws NullPointerException      if the specified collection is null
     */
    public boolean addAll(int index, Collection&lt;? extends E&gt; c) {
        rangeCheckForAdd(index);

        Object[] a = c.toArray();
        int numNew = a.length;
        ensureCapacityInternal(size + numNew);  // Increments modCount

        int numMoved = size - index;
        if (numMoved &gt; 0)
            System.arraycopy(elementData, index, elementData, index + numNew,
                    numMoved);

        System.arraycopy(a, 0, elementData, index, numNew);
        size += numNew;
        return numNew != 0;
    }

    /**
     * Removes from this list all of the elements whose index is between
     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.
     * Shifts any succeeding elements to the left (reduces their index).
     * This call shortens the list by {@code (toIndex - fromIndex)} elements.
     * (If {@code toIndex==fromIndex}, this operation has no effect.)
     * fromIndex - 要删除的第一个元素的索引
     * toIndex - 要删除的最后一个元素后的索引
     *
     * @throws IndexOutOfBoundsException if {@code fromIndex} or
     *                                   {@code toIndex} is out of range
     *                                   ({@code fromIndex &lt; 0 ||
     *                                   fromIndex &gt;= size() ||
     *                                   toIndex &gt; size() ||
     *                                   toIndex &lt; fromIndex})
     */
    protected void removeRange(int fromIndex, int toIndex) {
        modCount++;
        int numMoved = size - toIndex;
        System.arraycopy(elementData, toIndex, elementData, fromIndex,
                numMoved);

        // clear to let GC do its work
        int newSize = size - (toIndex - fromIndex);
        for (int i = newSize; i &lt; size; i++) {
            elementData[i] = null;
        }
        size = newSize;
    }

    /**
     * Checks if the given index is in range.  If not, throws an appropriate
     * runtime exception.  This method does *not* check if the index is
     * negative: It is always used immediately prior to an array access,
     * which throws an ArrayIndexOutOfBoundsException if index is negative.
     */
    private void rangeCheck(int index) {
        if (index &gt;= size)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
    }

    /**
     * A version of rangeCheck used by add and addAll.
     */
    private void rangeCheckForAdd(int index) {
        if (index &gt; size || index &lt; 0)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
    }

    /**
     * Constructs an IndexOutOfBoundsException detail message.
     * Of the many possible refactorings of the error handling code,
     * this &quot;outlining&quot; performs best with both server and client VMs.
     */
    private String outOfBoundsMsg(int index) {
        return &quot;Index: &quot; + index + &quot;, Size: &quot; + size;
    }

    /**
     * Removes from this list all of its elements that are contained in the
     * specified collection.
     *
     * @param c collection containing elements to be removed from this list
     * @return {@code true} if this list changed as a result of the call
     * @throws ClassCastException   if the class of an element of this list
     *                              is incompatible with the specified collection
     *                              (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)
     * @throws NullPointerException if this list contains a null element and the
     *                              specified collection does not permit null elements
     *                              (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;),
     *                              or if the specified collection is null
     * @see Collection#contains(Object)
     */
    public boolean removeAll(Collection&lt;?&gt; c) {
        Objects.requireNonNull(c);
        return batchRemove(c, false);
    }

    /**
     * Retains only the elements in this list that are contained in the
     * specified collection.  In other words, removes from this list all
     * of its elements that are not contained in the specified collection.
     *
     * @param c collection containing elements to be retained in this list
     * @return {@code true} if this list changed as a result of the call
     * @throws ClassCastException   if the class of an element of this list
     *                              is incompatible with the specified collection
     *                              (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)
     * @throws NullPointerException if this list contains a null element and the
     *                              specified collection does not permit null elements
     *                              (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;),
     *                              or if the specified collection is null
     * @see Collection#contains(Object)
     */
    public boolean retainAll(Collection&lt;?&gt; c) {
        Objects.requireNonNull(c);
        return batchRemove(c, true);
    }

    private boolean batchRemove(Collection&lt;?&gt; c, boolean complement) {
        final Object[] elementData = this.elementData;
        int r = 0, w = 0;
        boolean modified = false;
        try {
            for (; r &lt; size; r++)
                if (c.contains(elementData[r]) == complement)
                    elementData[w++] = elementData[r];
        } finally {
            // Preserve behavioral compatibility with AbstractCollection,
            // even if c.contains() throws.
            if (r != size) {
                System.arraycopy(elementData, r,
                        elementData, w,
                        size - r);
                w += size - r;
            }
            if (w != size) {
                // clear to let GC do its work
                for (int i = w; i &lt; size; i++)
                    elementData[i] = null;
                modCount += size - w;
                size = w;
                modified = true;
            }
        }
        return modified;
    }

    /**
     * Save the state of the &lt;tt&gt;ArrayList&lt;/tt&gt; instance to a stream (that
     * is, serialize it).
     *
     * @serialData The length of the array backing the &lt;tt&gt;ArrayList&lt;/tt&gt;
     * instance is emitted (int), followed by all of its elements
     * (each an &lt;tt&gt;Object&lt;/tt&gt;) in the proper order.
     */
    private void writeObject(java.io.ObjectOutputStream s)
            throws java.io.IOException {
        // Write out element count, and any hidden stuff
        int expectedModCount = modCount;
        s.defaultWriteObject();

        // Write out size as capacity for behavioural compatibility with clone()
        s.writeInt(size);

        // Write out all elements in the proper order.
        for (int i = 0; i &lt; size; i++) {
            s.writeObject(elementData[i]);
        }

        if (modCount != expectedModCount) {
            throw new ConcurrentModificationException();
        }
    }

    /**
     * Reconstitute the &lt;tt&gt;ArrayList&lt;/tt&gt; instance from a stream (that is,
     * deserialize it).
     */
    private void readObject(java.io.ObjectInputStream s)
            throws java.io.IOException, ClassNotFoundException {
        elementData = EMPTY_ELEMENTDATA;

        // Read in size, and any hidden stuff
        s.defaultReadObject();

        // Read in capacity
        s.readInt(); // ignored

        if (size &gt; 0) {
            // be like clone(), allocate array based upon size not capacity
            int capacity = calculateCapacity(elementData, size);
            SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, capacity);
            ensureCapacityInternal(size);

            Object[] a = elementData;
            // Read in all elements in the proper order.
            for (int i = 0; i &lt; size; i++) {
                a[i] = s.readObject();
            }
        }
    }

    /**
     * Returns a list iterator over the elements in this list (in proper
     * sequence), starting at the specified position in the list.
     * The specified index indicates the first element that would be
     * returned by an initial call to {@link ListIterator#next next}.
     * An initial call to {@link ListIterator#previous previous} would
     * return the element with the specified index minus one.
     *
     * &lt;p&gt;The returned list iterator is &lt;a href=&quot;#fail-fast&quot;&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.
     *
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    public ListIterator&lt;E&gt; listIterator(int index) {
        if (index &lt; 0 || index &gt; size)
            throw new IndexOutOfBoundsException(&quot;Index: &quot; + index);
        return new ListItr(index);
    }

    /**
     * Returns a list iterator over the elements in this list (in proper
     * sequence).
     *
     * &lt;p&gt;The returned list iterator is &lt;a href=&quot;#fail-fast&quot;&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.
     *
     * @see #listIterator(int)
     */
    public ListIterator&lt;E&gt; listIterator() {
        return new ListItr(0);
    }

    /**
     * Returns an iterator over the elements in this list in proper sequence.
     *
     * &lt;p&gt;The returned iterator is &lt;a href=&quot;#fail-fast&quot;&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.
     *
     * @return an iterator over the elements in this list in proper sequence
     */
    public Iterator&lt;E&gt; iterator() {
        return new Itr();
    }

    /**
     * An optimized version of AbstractList.Itr
     */
    private class Itr implements Iterator&lt;E&gt; {
        int cursor;       // index of next element to return
        int lastRet = -1; // index of last element returned; -1 if no such
        int expectedModCount = modCount;

        Itr() {
        }

        public boolean hasNext() {
            return cursor != size;
        }

        @SuppressWarnings(&quot;unchecked&quot;)
        public E next() {
            checkForComodification();
            int i = cursor;
            if (i &gt;= size)
                throw new NoSuchElementException();
            Object[] elementData = ArrayList.this.elementData;
            if (i &gt;= elementData.length)
                throw new ConcurrentModificationException();
            cursor = i + 1;
            return (E) elementData[lastRet = i];
        }

        /**
         * 移除时，会把cursor游标指向上一位
         */
        public void remove() {
            if (lastRet &lt; 0)
                throw new IllegalStateException();
            checkForComodification();

            try {
                ArrayList.this.remove(lastRet);
                cursor = lastRet;
                lastRet = -1;
                expectedModCount = modCount;
            } catch (IndexOutOfBoundsException ex) {
                throw new ConcurrentModificationException();
            }
        }

        @Override
        @SuppressWarnings(&quot;unchecked&quot;)
        public void forEachRemaining(Consumer&lt;? super E&gt; consumer) {
            Objects.requireNonNull(consumer);
            final int size = ArrayList.this.size;
            int i = cursor;
            if (i &gt;= size) {
                return;
            }
            final Object[] elementData = ArrayList.this.elementData;
            if (i &gt;= elementData.length) {
                throw new ConcurrentModificationException();
            }
            while (i != size &amp;&amp; modCount == expectedModCount) {
                consumer.accept((E) elementData[i++]);
            }
            // update once at end of iteration to reduce heap write traffic
            cursor = i;
            lastRet = i - 1;
            checkForComodification();
        }

        final void checkForComodification() {
            if (modCount != expectedModCount)
                throw new ConcurrentModificationException();
        }
    }

    /**
     * An optimized version of AbstractList.ListItr
     */
    private class ListItr extends Itr implements ListIterator&lt;E&gt; {
        ListItr(int index) {
            super();
            cursor = index;
        }

        public boolean hasPrevious() {
            return cursor != 0;
        }

        public int nextIndex() {
            return cursor;
        }

        public int previousIndex() {
            return cursor - 1;
        }

        @SuppressWarnings(&quot;unchecked&quot;)
        public E previous() {
            checkForComodification();
            int i = cursor - 1;
            if (i &lt; 0)
                throw new NoSuchElementException();
            Object[] elementData = ArrayList.this.elementData;
            if (i &gt;= elementData.length)
                throw new ConcurrentModificationException();
            cursor = i;
            return (E) elementData[lastRet = i];
        }

        public void set(E e) {
            if (lastRet &lt; 0)
                throw new IllegalStateException();
            checkForComodification();

            try {
                ArrayList.this.set(lastRet, e);
            } catch (IndexOutOfBoundsException ex) {
                throw new ConcurrentModificationException();
            }
        }

        public void add(E e) {
            checkForComodification();

            try {
                int i = cursor;
                ArrayList.this.add(i, e);
                cursor = i + 1;
                lastRet = -1;
                expectedModCount = modCount;
            } catch (IndexOutOfBoundsException ex) {
                throw new ConcurrentModificationException();
            }
        }
    }

    /**
     * Returns a view of the portion of this list between the specified
     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.  (If
     * {@code fromIndex} and {@code toIndex} are equal, the returned list is
     * empty.)  The returned list is backed by this list, so non-structural
     * changes in the returned list are reflected in this list, and vice-versa.
     * The returned list supports all of the optional list operations.
     *
     * &lt;p&gt;This method eliminates the need for explicit range operations (of
     * the sort that commonly exist for arrays).  Any operation that expects
     * a list can be used as a range operation by passing a subList view
     * instead of a whole list.  For example, the following idiom
     * removes a range of elements from a list:
     * &lt;pre&gt;
     *      list.subList(from, to).clear();
     * &lt;/pre&gt;
     * Similar idioms may be constructed for {@link #indexOf(Object)} and
     * {@link #lastIndexOf(Object)}, and all of the algorithms in the
     * {@link Collections} class can be applied to a subList.
     *
     * &lt;p&gt;The semantics of the list returned by this method become undefined if
     * the backing list (i.e., this list) is &lt;i&gt;structurally modified&lt;/i&gt; in
     * any way other than via the returned list.  (Structural modifications are
     * those that change the size of this list, or otherwise perturb it in such
     * a fashion that iterations in progress may yield incorrect results.)
     *
     * @throws IndexOutOfBoundsException {@inheritDoc}
     * @throws IllegalArgumentException  {@inheritDoc}
     */
    public List&lt;E&gt; subList(int fromIndex, int toIndex) {
        subListRangeCheck(fromIndex, toIndex, size);
        return new SubList(this, 0, fromIndex, toIndex);
    }

    static void subListRangeCheck(int fromIndex, int toIndex, int size) {
        if (fromIndex &lt; 0)
            throw new IndexOutOfBoundsException(&quot;fromIndex = &quot; + fromIndex);
        if (toIndex &gt; size)
            throw new IndexOutOfBoundsException(&quot;toIndex = &quot; + toIndex);
        if (fromIndex &gt; toIndex)
            throw new IllegalArgumentException(&quot;fromIndex(&quot; + fromIndex +
                    &quot;) &gt; toIndex(&quot; + toIndex + &quot;)&quot;);
    }

    private class SubList extends AbstractList&lt;E&gt; implements RandomAccess {
        private final AbstractList&lt;E&gt; parent;
        private final int parentOffset;
        private final int offset;
        int size;

        SubList(AbstractList&lt;E&gt; parent,
                int offset, int fromIndex, int toIndex) {
            this.parent = parent;
            this.parentOffset = fromIndex;
            this.offset = offset + fromIndex;
            this.size = toIndex - fromIndex;
            this.modCount = ArrayList.this.modCount;
        }

        public E set(int index, E e) {
            rangeCheck(index);
            checkForComodification();
            E oldValue = ArrayList.this.elementData(offset + index);
            ArrayList.this.elementData[offset + index] = e;
            return oldValue;
        }

        public E get(int index) {
            rangeCheck(index);
            checkForComodification();
            return ArrayList.this.elementData(offset + index);
        }

        public int size() {
            checkForComodification();
            return this.size;
        }

        public void add(int index, E e) {
            rangeCheckForAdd(index);
            checkForComodification();
            parent.add(parentOffset + index, e);
            this.modCount = parent.modCount;
            this.size++;
        }

        public E remove(int index) {
            rangeCheck(index);
            checkForComodification();
            E result = parent.remove(parentOffset + index);
            this.modCount = parent.modCount;
            this.size--;
            return result;
        }

        protected void removeRange(int fromIndex, int toIndex) {
            checkForComodification();
            parent.removeRange(parentOffset + fromIndex,
                    parentOffset + toIndex);
            this.modCount = parent.modCount;
            this.size -= toIndex - fromIndex;
        }

        public boolean addAll(Collection&lt;? extends E&gt; c) {
            return addAll(this.size, c);
        }

        public boolean addAll(int index, Collection&lt;? extends E&gt; c) {
            rangeCheckForAdd(index);
            int cSize = c.size();
            if (cSize == 0)
                return false;

            checkForComodification();
            parent.addAll(parentOffset + index, c);
            this.modCount = parent.modCount;
            this.size += cSize;
            return true;
        }

        public Iterator&lt;E&gt; iterator() {
            return listIterator();
        }

        public ListIterator&lt;E&gt; listIterator(final int index) {
            checkForComodification();
            rangeCheckForAdd(index);
            final int offset = this.offset;

            return new ListIterator&lt;E&gt;() {
                int cursor = index;
                int lastRet = -1;
                int expectedModCount = ArrayList.this.modCount;

                public boolean hasNext() {
                    return cursor != SubList.this.size;
                }

                @SuppressWarnings(&quot;unchecked&quot;)
                public E next() {
                    checkForComodification();
                    int i = cursor;
                    if (i &gt;= SubList.this.size)
                        throw new NoSuchElementException();
                    Object[] elementData = ArrayList.this.elementData;
                    if (offset + i &gt;= elementData.length)
                        throw new ConcurrentModificationException();
                    cursor = i + 1;
                    return (E) elementData[offset + (lastRet = i)];
                }

                public boolean hasPrevious() {
                    return cursor != 0;
                }

                @SuppressWarnings(&quot;unchecked&quot;)
                public E previous() {
                    checkForComodification();
                    int i = cursor - 1;
                    if (i &lt; 0)
                        throw new NoSuchElementException();
                    Object[] elementData = ArrayList.this.elementData;
                    if (offset + i &gt;= elementData.length)
                        throw new ConcurrentModificationException();
                    cursor = i;
                    return (E) elementData[offset + (lastRet = i)];
                }

                @SuppressWarnings(&quot;unchecked&quot;)
                public void forEachRemaining(Consumer&lt;? super E&gt; consumer) {
                    Objects.requireNonNull(consumer);
                    final int size = SubList.this.size;
                    int i = cursor;
                    if (i &gt;= size) {
                        return;
                    }
                    final Object[] elementData = ArrayList.this.elementData;
                    if (offset + i &gt;= elementData.length) {
                        throw new ConcurrentModificationException();
                    }
                    while (i != size &amp;&amp; modCount == expectedModCount) {
                        consumer.accept((E) elementData[offset + (i++)]);
                    }
                    // update once at end of iteration to reduce heap write traffic
                    lastRet = cursor = i;
                    checkForComodification();
                }

                public int nextIndex() {
                    return cursor;
                }

                public int previousIndex() {
                    return cursor - 1;
                }

                public void remove() {
                    if (lastRet &lt; 0)
                        throw new IllegalStateException();
                    checkForComodification();

                    try {
                        SubList.this.remove(lastRet);
                        cursor = lastRet;
                        lastRet = -1;
                        expectedModCount = ArrayList.this.modCount;
                    } catch (IndexOutOfBoundsException ex) {
                        throw new ConcurrentModificationException();
                    }
                }

                public void set(E e) {
                    if (lastRet &lt; 0)
                        throw new IllegalStateException();
                    checkForComodification();

                    try {
                        ArrayList.this.set(offset + lastRet, e);
                    } catch (IndexOutOfBoundsException ex) {
                        throw new ConcurrentModificationException();
                    }
                }

                public void add(E e) {
                    checkForComodification();

                    try {
                        int i = cursor;
                        SubList.this.add(i, e);
                        cursor = i + 1;
                        lastRet = -1;
                        expectedModCount = ArrayList.this.modCount;
                    } catch (IndexOutOfBoundsException ex) {
                        throw new ConcurrentModificationException();
                    }
                }

                final void checkForComodification() {
                    if (expectedModCount != ArrayList.this.modCount)
                        throw new ConcurrentModificationException();
                }
            };
        }

        public List&lt;E&gt; subList(int fromIndex, int toIndex) {
            subListRangeCheck(fromIndex, toIndex, size);
            return new SubList(this, offset, fromIndex, toIndex);
        }

        private void rangeCheck(int index) {
            if (index &lt; 0 || index &gt;= this.size)
                throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
        }

        private void rangeCheckForAdd(int index) {
            if (index &lt; 0 || index &gt; this.size)
                throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
        }

        private String outOfBoundsMsg(int index) {
            return &quot;Index: &quot; + index + &quot;, Size: &quot; + this.size;
        }

        private void checkForComodification() {
            if (ArrayList.this.modCount != this.modCount)
                throw new ConcurrentModificationException();
        }

        public Spliterator&lt;E&gt; spliterator() {
            checkForComodification();
            return new ArrayListSpliterator&lt;E&gt;(ArrayList.this, offset,
                    offset + this.size, this.modCount);
        }
    }

    @Override
    public void forEach(Consumer&lt;? super E&gt; action) {
        Objects.requireNonNull(action);
        final int expectedModCount = modCount;
        @SuppressWarnings(&quot;unchecked&quot;) final E[] elementData = (E[]) this.elementData;
        final int size = this.size;
        for (int i = 0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) {
            action.accept(elementData[i]);
        }
        if (modCount != expectedModCount) {
            throw new ConcurrentModificationException();
        }
    }

    /**
     * Creates a &lt;em&gt;&lt;a href=&quot;Spliterator.html#binding&quot;&gt;late-binding&lt;/a&gt;&lt;/em&gt;
     * and &lt;em&gt;fail-fast&lt;/em&gt; {@link Spliterator} over the elements in this
     * list.
     *
     * &lt;p&gt;The {@code Spliterator} reports {@link Spliterator#SIZED},
     * {@link Spliterator#SUBSIZED}, and {@link Spliterator#ORDERED}.
     * Overriding implementations should document the reporting of additional
     * characteristic values.
     *
     * @return a {@code Spliterator} over the elements in this list
     * @since 1.8
     */
    @Override
    public Spliterator&lt;E&gt; spliterator() {
        return new ArrayListSpliterator&lt;&gt;(this, 0, -1, 0);
    }

    /**
     * Index-based split-by-two, lazily initialized Spliterator
     */
    static final class ArrayListSpliterator&lt;E&gt; implements Spliterator&lt;E&gt; {

        /*
         * If ArrayLists were immutable, or structurally immutable (no
         * adds, removes, etc), we could implement their spliterators
         * with Arrays.spliterator. Instead we detect as much
         * interference during traversal as practical without
         * sacrificing much performance. We rely primarily on
         * modCounts. These are not guaranteed to detect concurrency
         * violations, and are sometimes overly conservative about
         * within-thread interference, but detect enough problems to
         * be worthwhile in practice. To carry this out, we (1) lazily
         * initialize fence and expectedModCount until the latest
         * point that we need to commit to the state we are checking
         * against; thus improving precision.  (This doesn't apply to
         * SubLists, that create spliterators with current non-lazy
         * values).  (2) We perform only a single
         * ConcurrentModificationException check at the end of forEach
         * (the most performance-sensitive method). When using forEach
         * (as opposed to iterators), we can normally only detect
         * interference after actions, not before. Further
         * CME-triggering checks apply to all other possible
         * violations of assumptions for example null or too-small
         * elementData array given its size(), that could only have
         * occurred due to interference.  This allows the inner loop
         * of forEach to run without any further checks, and
         * simplifies lambda-resolution. While this does entail a
         * number of checks, note that in the common case of
         * list.stream().forEach(a), no checks or other computation
         * occur anywhere other than inside forEach itself.  The other
         * less-often-used methods cannot take advantage of most of
         * these streamlinings.
         */

        private final ArrayList&lt;E&gt; list;
        private int index; // current index, modified on advance/split
        private int fence; // -1 until used; then one past last index
        private int expectedModCount; // initialized when fence set

        /**
         * Create new spliterator covering the given  range
         */
        ArrayListSpliterator(ArrayList&lt;E&gt; list, int origin, int fence,
                             int expectedModCount) {
            this.list = list; // OK if null unless traversed
            this.index = origin;
            this.fence = fence;
            this.expectedModCount = expectedModCount;
        }

        private int getFence() { // initialize fence to size on first use
            int hi; // (a specialized variant appears in method forEach)
            ArrayList&lt;E&gt; lst;
            if ((hi = fence) &lt; 0) {
                if ((lst = list) == null)
                    hi = fence = 0;
                else {
                    expectedModCount = lst.modCount;
                    hi = fence = lst.size;
                }
            }
            return hi;
        }

        public ArrayListSpliterator&lt;E&gt; trySplit() {
            int hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; 1;
            return (lo &gt;= mid) ? null : // divide range in half unless too small
                    new ArrayListSpliterator&lt;E&gt;(list, lo, index = mid,
                            expectedModCount);
        }

        public boolean tryAdvance(Consumer&lt;? super E&gt; action) {
            if (action == null)
                throw new NullPointerException();
            int hi = getFence(), i = index;
            if (i &lt; hi) {
                index = i + 1;
                @SuppressWarnings(&quot;unchecked&quot;) E e = (E) list.elementData[i];
                action.accept(e);
                if (list.modCount != expectedModCount)
                    throw new ConcurrentModificationException();
                return true;
            }
            return false;
        }

        public void forEachRemaining(Consumer&lt;? super E&gt; action) {
            int i, hi, mc; // hoist accesses and checks from loop
            ArrayList&lt;E&gt; lst;
            Object[] a;
            if (action == null)
                throw new NullPointerException();
            if ((lst = list) != null &amp;&amp; (a = lst.elementData) != null) {
                if ((hi = fence) &lt; 0) {
                    mc = lst.modCount;
                    hi = lst.size;
                } else
                    mc = expectedModCount;
                if ((i = index) &gt;= 0 &amp;&amp; (index = hi) &lt;= a.length) {
                    for (; i &lt; hi; ++i) {
                        @SuppressWarnings(&quot;unchecked&quot;) E e = (E) a[i];
                        action.accept(e);
                    }
                    if (lst.modCount == mc)
                        return;
                }
            }
            throw new ConcurrentModificationException();
        }

        public long estimateSize() {
            return (long) (getFence() - index);
        }

        public int characteristics() {
            return Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED;
        }
    }

    @Override
    public boolean removeIf(Predicate&lt;? super E&gt; filter) {
        Objects.requireNonNull(filter);
        // figure out which elements are to be removed
        // any exception thrown from the filter predicate at this stage
        // will leave the collection unmodified
        int removeCount = 0;
        final BitSet removeSet = new BitSet(size);
        final int expectedModCount = modCount;
        final int size = this.size;
        for (int i = 0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) {
            @SuppressWarnings(&quot;unchecked&quot;) final E element = (E) elementData[i];
            if (filter.test(element)) {
                removeSet.set(i);
                removeCount++;
            }
        }
        if (modCount != expectedModCount) {
            throw new ConcurrentModificationException();
        }

        // shift surviving elements left over the spaces left by removed elements
        final boolean anyToRemove = removeCount &gt; 0;
        if (anyToRemove) {
            final int newSize = size - removeCount;
            for (int i = 0, j = 0; (i &lt; size) &amp;&amp; (j &lt; newSize); i++, j++) {
                i = removeSet.nextClearBit(i);
                elementData[j] = elementData[i];
            }
            for (int k = newSize; k &lt; size; k++) {
                elementData[k] = null;  // Let gc do its work
            }
            this.size = newSize;
            if (modCount != expectedModCount) {
                throw new ConcurrentModificationException();
            }
            modCount++;
        }

        return anyToRemove;
    }

    @Override
    @SuppressWarnings(&quot;unchecked&quot;)
    public void replaceAll(UnaryOperator&lt;E&gt; operator) {
        Objects.requireNonNull(operator);
        final int expectedModCount = modCount;
        final int size = this.size;
        for (int i = 0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) {
            elementData[i] = operator.apply((E) elementData[i]);
        }
        if (modCount != expectedModCount) {
            throw new ConcurrentModificationException();
        }
        modCount++;
    }

    @Override
    @SuppressWarnings(&quot;unchecked&quot;)
    public void sort(Comparator&lt;? super E&gt; c) {
        final int expectedModCount = modCount;
        Arrays.sort((E[]) elementData, 0, size, c);
        if (modCount != expectedModCount) {
            throw new ConcurrentModificationException();
        }
        modCount++;
    }
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[B树和B+树及其区别？]]></title>
        <id>https://Slice1129.github.io/post/b-shu-he-bshu-ji-qi-qu-bie/</id>
        <link href="https://Slice1129.github.io/post/b-shu-he-bshu-ji-qi-qu-bie/">
        </link>
        <updated>2019-11-12T06:26:11.000Z</updated>
        <content type="html"><![CDATA[<p>B树和B+树的最主要区别在于：</p>
<ul>
<li>B+树是B树的改进版本，将其内结点只做索引使用，移除了指向data record的指针，使得每个节点中能够存放更多的key，因此能有更大的出度。这就意味着存放同样高度的key，树的高层能进一步被压缩，使得检索时间更短。</li>
<li>当然了,由于底部的叶子结点是链表形式, 因此也可以实现更方便的顺序遍历, 但是这是比较次要的, 最主要的的还是第(1)点.</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jenkins安装及SpringBoot自动部署]]></title>
        <id>https://Slice1129.github.io/post/jenkins-an-zhuang-ji-springboot-zi-dong-bu-shu/</id>
        <link href="https://Slice1129.github.io/post/jenkins-an-zhuang-ji-springboot-zi-dong-bu-shu/">
        </link>
        <updated>2019-11-08T08:12:51.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-安装jenkins">1、安装Jenkins</h1>
<p>打开网站<code>https://jenkins.io/zh/download/</code>，仅下载war包。<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8qqed0olxj21880ol0uv.jpg" alt="" loading="lazy"></p>
<h1 id="2-启动jenkins">2、启动Jenkins</h1>
<p>将Jenkins.war放置到某个目录，然后通过java -jar 启动,httpPort设置端口为9090</p>
<pre><code>/usr/local/jdk8/bin/java -jar /usr/local/jenkins/jenkins.war --httpPort=9090 -XX:ErrorFile=/usr/local/jenkins//hs_err_pid%p.log
</code></pre>
<p>等待启动完成。</p>
<h1 id="3-打开jenkins">3、打开Jenkins</h1>
<p>如果是在本机启动的，则打开浏览器输入<code>http://localhost:9090/</code>，如果是服务器，则<code>host:9090</code>，记得打开防火墙端口。<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8qr3e3hgtj21ik15maer.jpg" alt="" loading="lazy"><br>
我们去服务器中查看密码是多少。</p>
<pre><code>cat /**/** #图中的路径 
</code></pre>
<p>登录进去之后。因为刚开始使用，选择推荐安装，后续要其它插件的话，可在系统设置里再安装。<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8qr6s2jw8j21i80q2jx4.jpg" alt="" loading="lazy"><br>
安装过程比较慢，可以先去干点其它事情。<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8qr8tjrr8j21130opdhr.jpg" alt="" loading="lazy"></p>
<ul>
<li>安装Git<pre><code>yum install git
</code></pre>
</li>
<li>安装maven<br>
打开网址下载<code>https://maven.apache.org/download.cgi</code>，选择下载。<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8qrfchb7tj21fx0nuteh.jpg" alt="maven" loading="lazy"><br>
下载完成后，解压到某个目录，等会用到。</li>
</ul>
<h1 id="配置环境">配置环境</h1>
<p>点击 <code>系统管理</code>，<code>全局工具配置</code>。<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8tusu2hqrj21hc0okgpo.jpg" alt="配置" loading="lazy"><br>
设置maven的配置文件，并设置jdk的目录。<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8tuv8jsh6j218z0jpq40.jpg" alt="" loading="lazy"><br>
配置maven目录。<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8tuvvgedvj216q0dr3yz.jpg" alt="" loading="lazy"><br>
配置过程服务器，要先安装插件<code>publish over ssh</code>。<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8tw6y8ltfj21h30ha0tm.jpg" alt="" loading="lazy"><br>
配置后如图.<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8twjd9diyj21ew0lm3zr.jpg" alt="" loading="lazy"></p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Name</td>
<td>服务器的名字，可随便定义</td>
</tr>
<tr>
<td>Hostname</td>
<td>服务器的IP地址</td>
</tr>
<tr>
<td>Username</td>
<td>用户名</td>
</tr>
<tr>
<td>Remote Directory</td>
<td>远程服务器上的根目录，jenkis打包后的程序放在此目录下</td>
</tr>
<tr>
<td>Passphrase / Password</td>
<td>密码（记得勾选Use password authentication, or use a different key）</td>
</tr>
<tr>
<td>Port</td>
<td>服务器端口</td>
</tr>
</tbody>
</table>
<h1 id="新建任务">新建任务</h1>
<p>输入项目名称，选择<code>构建一个maven项目</code>。<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8qri896cej21g50oo77v.jpg" alt="选择maven项目" loading="lazy"></p>
<p>是不是没有找到maven项目，这时我们还得安装一个插件。<br>
系统设置-插件管理-可选插件，搜索<code>Maven Integration</code><br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8tvp338gmj21f90lzq5m.jpg" alt="" loading="lazy"><br>
等待安装完成，安装成功后，点击返回工作台，继续<code>新建任务</code>，此时就看见了<code>构建一个maven</code>项目。<br>
滚动到源码管理。选择Git，输入我们仓库地址。<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8qrmyommzj21dy0m2wfz.jpg" alt="git地址" loading="lazy"><br>
图中显示的是验证失败，因为还没有登录git账号。<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8qrp1n588j21fa0nrgn1.jpg" alt="添加git" loading="lazy"><br>
输入账号和密码后，点击添加即可。分支默认是<code>master</code>，如果与你的仓库不一样，请更改。<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8qrqiq78kj21320g5752.jpg" alt="分支" loading="lazy"><br>
默认勾选，意思是 每当建立SNAPSHOT依赖项时就进行构建<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8qrt46elgj215a0awwf6.jpg" alt="" loading="lazy"><br>
选择我们前面添加的服务器，后期编辑后会上传至服务器。<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8qrvgn5gdj214y0l7abg.jpg" alt="推送至服务器" loading="lazy"></p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>名称</td>
<td>本地服务器</td>
<td>SSH Server名称，根据之前配置选择即可</td>
</tr>
<tr>
<td>源文件</td>
<td>target/*</td>
<td>需要传输的文件，支持通配符，编译文件默认都在项目根目录下的target目录中</td>
</tr>
<tr>
<td>删除前缀</td>
<td>target</td>
<td>移除匹配到的文件路径的前缀，如果留空，会在远程服务器上创建对应的目录</td>
</tr>
<tr>
<td>远端目录</td>
<td>jenkins_web/</td>
<td>远程服务器上的项目目录，该目录会被创建在Publish over SSH配置的远程根目录中(/usr/local/applications/)</td>
</tr>
<tr>
<td>执行命令</td>
<td>cd /usr/local/applications/jenkins_web/ <br> nohup /usr/local/jdk8/bin/java -jar jenkins-0.0.1-SNAPSHOT.jar &gt; nohup.out &amp; 2&gt;&amp;1 &amp;</td>
<td>文件传输到远程服务器后执行的命令</td>
</tr>
</tbody>
</table>
<p>在打包时输入自定义的参数<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8t39dehsaj211z0ocjsn.jpg" alt="maven打包" loading="lazy"><br>
然后保存即可。</p>
<p>最后，点击 立即构建 ，等待构建完成。<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8t3fxrumdj213d0crdhi.jpg" alt="" loading="lazy"><br>
访问Web程序的端口，尝试是否能请求成功。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java类加载器与双亲委派模型]]></title>
        <id>https://Slice1129.github.io/post/java-lei-jia-zai-qi-yu-shuang-qin-wei-pai-mo-xing/</id>
        <link href="https://Slice1129.github.io/post/java-lei-jia-zai-qi-yu-shuang-qin-wei-pai-mo-xing/">
        </link>
        <updated>2019-11-01T03:09:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1双亲委派原理">1.双亲委派原理</h1>
<h2 id="11-什么是双亲委派">1.1 什么是双亲委派</h2>
<p>简单说，类加载器就是根据指定的全限定名称将class文件加载到jvm中，装载class对象。</p>
<blockquote>
<ul>
<li>启动类加载器(Bootstrap ClassLoader)：这个加载器不是一个java类，而是底层用C++实现的，负责将存放在JAVA_HOME/lib下的类库加载，如rt.jar。因此，启动类加载器不属于Java类库，无法被Java程序直接引用，用户在编辑自定义类加载器时，如果需要把加载请求委托给启动类载器，那直接使用null替代即可。</li>
<li>扩展类加载器(Extension ClassLoader)：负责加载JAVA_HOME/lib/ext/目录或java.ext.dirs系统变量所指定的路径中的所有类库。</li>
<li>应用类加载器(Application ClassLoader)：负责加载用户类路径(classpath)上指定的类库。一般情况下，如果我们没有自定义类加载器，默认的就是这个加载器。</li>
</ul>
</blockquote>
<p>双亲委派过程：当一个类加载器收到加载请求时，它不会自己先尝试加载这个类，而是把请求委派给父加载器完成。每个类加载器都是如此，只有当父类载器找不到指定类时（即ClassNotFoundException），子加载器才会尝试自己去加载。<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g8ieh8ti0wj20oe0fstb2.jpg" alt="" loading="lazy"></p>
<h2 id="12-为什么需要双亲委派模型">1.2 为什么需要双亲委派模型？</h2>
<p>为什么需要双亲委派模型呢？</p>
<blockquote>
<p>黑客自定义一个<code>java.lang.String</code>类，该String类具有系统的String类一样的功能，只是在某个函数稍作修改。比如equals函数，这个函数经常使用，如果在这个函数中，加入一些“病毒代码”。并通过自定义类加载器加载到JVM中。此时，如果没有使用双亲委派模型，那JVM就可能误认为黑客自定义的<code>java.lang.String</code>类是系统的String类，从而导致“病毒代码”被执行。</p>
</blockquote>
<p>而有了双亲委派模型，黑客自定义的<code>java.lang.String</code>永远不会被加载到内存中。因为首先是最顶端类加载器加载系统的<code>java.lang.String</code>类，最终自定义的类加载器无法加载<code>java.lang.String</code>类。</p>
<p>或许你会想，我在定义的类加载器里面强制加载自定义的java.lang.String类，不去通过调用父加载器不就好了吗？的确，这样是可行的。但是，在JVM中，判断一个对象是否是某个类型时，如果该对象的实际类型与带比较类型的类加载器不同，那么会返回false。</p>
<p>举个栗子：</p>
<blockquote>
<p>ClassLoader1、ClassLoader2都加载java.lang.String类，对应Class1,、Class2对象。那么Class1对象不属于ClassLoader2对象加载的java.lang.String类型。</p>
</blockquote>
<h1 id="2自定义类加载器">2.自定义类加载器</h1>
<ul>
<li>显示调用继承来的loadClass()方法来加载类，此时在loadClass()方法内部将执行双亲委派的逻辑。如果父类加载器没能成功加载类，则调用Overload父类的findClass()方法来实现自定义加载器的加载逻辑：<br>
将要加载的类的.class文件中内容输入到byte[]数据中;<br>
调用父类(ClassLoader)的defineClass()方法完成真正的类加载。</li>
</ul>
<pre><code>public class ClassLoaderCustom extends ClassLoader {

    private String path;

    public ClassLoaderCustom(String path) {
        this.path = path;
    }

    @Override
    protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException {
        System.out.println(&quot;OK&quot;);
        try (
                FileInputStream inputStream = new FileInputStream(path);
                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ) {
            int length;
            while ((length = inputStream.read()) != -1) {
                outputStream.write(length);
            }

            byte[] bytes = outputStream.toByteArray();
            System.out.println(&quot;inputStream.getChannel().size() = &quot; + inputStream.getChannel().size());
            System.out.println(&quot;bytes.length = &quot; + bytes.length);
            return this.defineClass(name, bytes, 0, bytes.length);

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return null;
    }

    public static void main(String[] args) throws Exception {
        ClassLoaderCustom loader = new ClassLoaderCustom(&quot;D://PersonFuck.class&quot;);
        Class&lt;?&gt; loadClass = loader.loadClass(&quot;com.fuck.PersonFuck&quot;);
        System.out.println(loadClass.newInstance().toString());
    }
}
</code></pre>
<h1 id="3classloader中重要方法解析">3.ClassLoader中重要方法解析</h1>
<pre><code>public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException {
        return loadClass(name, false);
}
</code></pre>
<p>封装了双亲委派模型：先交给父类加载，父类如果没有加载到再由自己加载，所以自定义类加载器不要Overload此方法，否则会破坏双亲委派。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jmap使用记录]]></title>
        <id>https://Slice1129.github.io/post/jmap-shi-yong-ji-lu/</id>
        <link href="https://Slice1129.github.io/post/jmap-shi-yong-ji-lu/">
        </link>
        <updated>2019-10-30T03:51:12.000Z</updated>
        <content type="html"><![CDATA[<p>jmap -heap 1234 查看进程号为1234的Java程序的整个jvm内存状态<br>
jmap -histo 1234 查找进程号为1234的java程序的jvm堆中对象详细占用情况<br>
jmap -dump:format=b,file=/my.dump 1234  导出1234进程的java程序的整个JVM信息</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[图解TCP协议中的三次握手]]></title>
        <id>https://Slice1129.github.io/post/tu-jie-tcp-xie-yi-zhong-de-san-ci-wo-shou/</id>
        <link href="https://Slice1129.github.io/post/tu-jie-tcp-xie-yi-zhong-de-san-ci-wo-shou/">
        </link>
        <updated>2019-09-26T05:46:47.000Z</updated>
        <content type="html"><![CDATA[<p>TCP全称（Transmission Control Protocol）传输控制协议。<br>
TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确定建立一个连接：<br>
位码即TCP标志位，有6种标示</p>
<ul>
<li>SYN（synchronous）建立联机</li>
<li>ACK（acknowledgement）确认</li>
<li>PSH（push）传送</li>
<li>FIN（finish）结束</li>
<li>RST（reset）重置</li>
<li>URG（urgent）紧急<br>
其中Sequence number为顺序号码，Acknowledge number为确认号码。<br>
先来看看如何建立连接的：<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g7cvruwt57j20nb0g07fa.jpg" alt="" loading="lazy"><br>
实际上是这样的，看红色框：<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g7cw9yznt2j21hc0n8wha.jpg" alt="" loading="lazy"><br>
第一次握手：<br>
客户端发送SYN=1，Seq=(x=0，这里为了方便图中是0，其实是随机数)到服务器，服务器由SYN=1知道客户端要求建立联机。<br>
第二次握手：服务器端发送SYN=1，ACK=1，Seq=0(随机数y)，Ack=1(x+1)到客户端。<br>
第三次握手：客户端收到Ack后检查是否正确，即第一次发送的Seq number+1，如果正确，客户端会发送ACK=1，Seq=1(x+1)，Ack=1(y+1)，当服务器收到Seq和Ack后则连接建立成功。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[系统CPU飙高排查]]></title>
        <id>https://Slice1129.github.io/post/xi-tong-cpu-biao-gao-pai-cha/</id>
        <link href="https://Slice1129.github.io/post/xi-tong-cpu-biao-gao-pai-cha/">
        </link>
        <updated>2019-09-24T07:41:14.000Z</updated>
        <content type="html"><![CDATA[<p>发现接口请求无反应，登上服务器查看发现CPU一直居高不下。<br>
直接敲</p>
<pre><code>top
</code></pre>
<p><img src="https://ww1.sinaimg.cn/large/b828643bgy1g7ankw1e5dj218p0qxwi3.jpg" alt="图片1" loading="lazy"><br>
我们发现PID为9698的进程占用了99.9的CPU，接下来查看该进程里面哪个线程存在高运算。</p>
<pre><code>top -Hp 9698
</code></pre>
<p><img src="https://ww1.sinaimg.cn/large/b828643bgy1g7anqbre9aj21950m9adu.jpg" alt="图片2" loading="lazy"><br>
图片显示PID为9720的线程占用的比较多，我们先将转成16进制，稍后在jstack中方便查找。</p>
<pre><code>printf &quot;%x\n&quot; 9720
25f8
</code></pre>
<p>下面使用jstack导出运行时的日志。</p>
<pre><code>jstack 9698 &gt;&gt; 9698cpu.log
</code></pre>
<p>或者直接查看</p>
<pre><code>jstack 9698
</code></pre>
<p><img src="https://ww1.sinaimg.cn/large/b828643bgy1g7ao2y4cepj218y0qiag7.jpg" alt="图片3" loading="lazy"><br>
我们找到了UserController的第55行代码一直占用CPU。我们打开IDEA查看<br>
<img src="https://ww1.sinaimg.cn/large/b828643bgy1g7ao6iunghj21ee0bxjtk.jpg" alt="图片4" loading="lazy"><br>
我们找到了罪魁祸首。<br>
O(∩_∩)O哈哈~，其实这些只是为了测试而已。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[AtomicInteger CAS]]></title>
        <id>https://Slice1129.github.io/post/atomicinteger-cas/</id>
        <link href="https://Slice1129.github.io/post/atomicinteger-cas/">
        </link>
        <updated>2019-08-12T02:20:36.000Z</updated>
        <content type="html"><![CDATA[<pre><code>public class Test1 {

    public static void main(String[] args) {
        AtomicInteger count = new AtomicInteger(99);
        count.addAndGet(5);
    }
}
</code></pre>
<p>当调用addAndGet方法时，AtomicInteger会调用unsafe.getAndAddInt(this,valueOffset,delta)+delta，<br>
首先调用getIntVolatile获取当内存中的值，然后compareAndSwapInt</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS 6、7下pptp vpn一键安装脚本]]></title>
        <id>https://Slice1129.github.io/post/centos-67-xia-pptp-vpn-yi-jian-an-zhuang-jiao-ben/</id>
        <link href="https://Slice1129.github.io/post/centos-67-xia-pptp-vpn-yi-jian-an-zhuang-jiao-ben/">
        </link>
        <updated>2019-07-23T02:46:48.000Z</updated>
        <content type="html"><![CDATA[<p>（本文的命令基于centos 6.5，如是其他版本，可能命令有些许不同，但是同一个意思）</p>
<p>下载一键脚本：</p>
<p>wget http://mirrors.linuxeye.com/scripts/vpn_centos.sh</p>
<p>给予脚本权限</p>
<p>chmod a+x vpn_centos.sh</p>
<p>运行脚本，安装</p>
<p>bash vpn_centos.sh</p>
<p>之后按照提示设置账号和密码即可。<br>
自定义操作：</p>
<p>更改本地IP地址池：</p>
<p>编辑：</p>
<p>vim /etc/pptpd.conf</p>
<p>更改PPTP的账号、密码</p>
<p>编辑：</p>
<p>vim /etc/ppp/chap-secrets</p>
<p>更改DNS设置</p>
<p>编辑：</p>
<p>vim /etc/ppp/options.pptpd</p>
]]></content>
    </entry>
</feed>